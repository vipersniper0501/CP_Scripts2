{"name":"Cp scripts2","tagline":"This Repository is to be used as a sort of backup resource for my competition scripts and will most likely go public after a graduate from highschool and can no longer participate in CyberPatriot competitions.","body":"= CP_Scripts2\r\nMichael Brenner\r\nv1.0, 5/14/2020\r\n\r\nimage:https://app.codacy.com/project/badge/Grade/d277e9b251a74fc0a61da1fc321a9bfa[\"Codacy code quality\",link=\"https://www.codacy.com/manual/vipersniper0501/CP_Scripts2?utm_source=github.com&utm_medium=referral&utm_content=vipersniper0501/CP_Scripts2&utm_campaign=Badge_Grade\"]\r\nimage:https://img.shields.io/github/issues-raw/vipersniper0501/CP_Scripts2[GitHub issues]\r\nimage:https://img.shields.io/github/repo-size/vipersniper0501/CP_Scripts2[GitHub repo size]\r\n\r\n\r\n*DISCLAIMERS:* This project is student made with inspiration from other projects such as the scripts made by Ethan Fowler from TEAM BYTE.\r\n\r\nThis script also uses Microsoft Sysinternals suite which is owned and created by Microsoft.I do not take any credit in the creation of that program.(_I don't want to get sued_)\r\n\r\nFYI: This will be mostly used for a backup location for my scripts and will not always have the most up to date versions.\r\n\r\nIMPORTANT: Before using any of these scripts for the CyberPatriot Challenges, please make sure that you complete as many of the Forensic Questions as possible!If not, then you risk the chance that the script will remove or change something that the Forensics Question requires later.\r\n\r\n'''\r\n\r\n== Dependancies\r\n\r\n- Admin access\r\n- Set-ExecutionPolicy Unrestricted _(For Powershell Scripts only)_\r\n\r\n== Current Scripts and GUI's Available\r\n\r\nI currently have two Command Line scripts:\r\n\r\n- link:./CLI_Scripts/WindowsScript/[Powershell Script] for Windows machines\r\n- link:./CLI_Scripts/LinuxScript/[Bash Script] for Linux machines\r\n\r\nThese two scripts currently have around 10-20 commands each.They do most of the basic commands that you would use in competition, but, they are not good enough that they could get you a ton of points by just using them alone.\r\n\r\nNOTE: The Command Line Script are on hold for now as currently I am spending all of my efforts on the GUI's.This is mostly due to it being A.) more fun for me and B.) because due to the fact that the GUI's are cross platform, I no longer need to manage 2-3 different scripts for different OS's [.underline]#and# use more than one coding/scripting language.(It becomes very hard to remember how to do things in both Bash and Powershell the bigger your script gets :S )\r\n\r\nI currently have available three GUI's.Of the three, only two are very developed.The following list are the available GUI's to choose from:\r\n\r\n* link:./GUIs/ScriptRunnerTkinter_GUI/[Script Runner Tkinter]\r\n** Built on the TKinter framework so it looks like it was made in the 90's\r\n\r\n* link:./GUIs/ScriptRunnerElectron/[Script Runner Electron]\r\n** This GUI is built on the same framework that applications like Discord, Slack, and Atom.Although due to it using website code (HTML, CSS, JavaScript) I am still having trouble attempting to connect it to python code that will actually execute the commands\r\n\r\n* link:./GUIs/ScriptRunnerPyQt5_GUI/[Script Runner PyQt5]  image:https://travis-ci.com/vipersniper0501/CP_Scripts2.svg?branch=GUI-Updates[\"Build Status\",link=\"https://travis-ci.com/vipersniper0501/CP_Scripts2\"]\r\n** This GUI is built on the PyQt frame work.This is the newest best version of all of the GUI's and Scripts Combined.It is the most modern looking and has the most commands, platform support, and Ease of Use.\r\n\r\n== How to compile GUI\r\n\r\nMake sure you have the correct version of Pyinstaller:\r\n\r\n`pip install https://github.com/pyinstaller/pyinstaller/archive/develop.tar.gz`\r\n\r\nRun `pip install auto-py-to-exe` to install the compiler.\r\n\r\nNOTE: For executables that work on **Windows:** Run auto-py-to-exe on a windows machine. +\r\nFor executables that work with **Linux:** Run auto-py-to-exe on a Linux/Unix machine.\r\n\r\n1.) Move all files that are to be converted into a .exe onto the desktop. +\r\n2.) open powershell/terminal as admin and type `auto-py-to-exe` +\r\n3.) In `Script Location` in the newly opened window, put in the location of the .py file that launches the GUI +\r\n4.) Under Additional Files, add all folders and files that are to be used in the script +\r\n5.) Under Advanced, change Output Directory to the desktop to easily locate the newly created .exe file +\r\n6.) Hit `Convert .PY TO .EXE` +\r\n7.) your newly created .exe file should now have been created and added to the desktop\r\n\r\nhttps://dev.to/eshleron/how-to-convert-py-to-exe-step-by-step-guide-3cfi\r\n\r\n== Usage Instructions For CLI Powershell Scripts:\r\n\r\n1.) Run Powershell as Admin +\r\n2.) Navigate to location of script file through powershell ex: `cd C:\\Users\\Michael\\Downloads\\` +\r\n3.) In Powershell type the following: `Set-ExecutionPolicy Unrestricted` +\r\nDo this to allow the execution of `Powershell` scripts +\r\n4.) Once at the location where the script is located type the following: `./cyberWin10.ps1`\r\n\r\nHit Enter\r\n\r\nThat is it! Good Luck!\r\n\r\nSome of the commands might require for you to execute them twice if they did not show a list when they should have.\r\nI am currently working on fixing this problem.\r\n\r\n== Usage Instructions For Linux CLI Scripts\r\n\r\n1.) Navigate to directory where script is located in terminal +\r\n2.) Type the following: `sudo bash ./linux_Script.sh` +\r\n3.) The script is now running and you are now free to choose the commands to execute\r\n\r\n== Version Numbers\r\n\r\n1.2.3.4\r\n\r\n**First Number:** Generation (General Information -> 0, Cli -> 1, Tkinter -> 2, PyQt5 ->3, Electron -> 4) +\r\nThis number is to be used to identify which generation of script has been changed.\r\nFor example, if I were to change something in the CLI version it would uploaded as version 1.x.x.x, but if I were to change something in the Electron version, I would upload as version 4.x.x.x\r\n\r\n**Second Number:** used for noting number of os's completely supported in the generation\r\n\r\n**Third Number:** Number of completed commands regardless of OS type or section of program (mainly used in the GUI versions).\r\n\r\n*Fourth Number:* used for patches, minor updates, and updates that are working towards a new feature. +\r\nThis is also updated when code has been edited to become more efficient or after finding a typo and making a quick edit.\r\nAlso changes if a file was forgotten when pushing to the repository.\r\n\r\nNOTE: When ever a version number has been updated, all of the numbers to the right of the changed number is set to zero.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}